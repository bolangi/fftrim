#!/usr/bin/env perl
use strict;
use warnings;
use autodie ':all';
use feature 'say';
my ($test) = @ARGV;

## commented lines are dropped
#00000.MTS
## two files are to be combined CONTENTS format:
# 00001.MTS 00002.MTS : S5-D01 Orly group session with three 3mo babies : 0:15 : 1:03:15

my $finaldir = '../final';
mkdir $finaldir unless -e $finaldir;
-d $finaldir or die "$finaldir is not a directory!";

# remove column 1 commented lines
my @lines = grep{ ! /^#/} split "\n", qx( cat ./CONTENTS);
my $is_error;
process_lines(); # check for errors;
say(STDERR "Errors found. Fix CONTENTS files and try again."), exit if $is_error;
process_lines("really do it!"); # but still may be a test

sub process_lines { 
	my $do = shift;
	foreach my $line (@lines){
		$line =~ s/\s+$//;
		say STDERR "line: $line";
		my ($source_files, $compression_target, $start, $end) = split /\s+:\s+/, $line;
		my @source_files = split " ", $source_files;
		say STDERR qq(no compression target for source files "$source_files". Using source name.) if not $compression_target;
		$compression_target //= $source_files[0];
		$compression_target = compression_target($compression_target);
		{
		no warnings 'uninitialized';
		say STDERR "source files: @source_files";
		say STDERR "compression target: $compression_target";
		say STDERR "start time: $start";
		say STDERR "end time: $end";
		say(STDERR qq(no source files in line!! $line)), $is_error++, if not @source_files;
		my @missing = grep { ! -r } @source_files;
		say(STDERR qq(missing source files: @missing)), $is_error++, if @missing;
		}

		next unless $do;
		my $compression_source;
		if (@source_files > 1)
		{
			my $temp_file = compression_target($source_files[0]);
			say STDERR "temp file: $temp_file";
			concatenate_video($temp_file, @source_files) unless -e $temp_file;
			$compression_source = $temp_file;
		} 
		else 
		{ 
			$compression_source = $source_files[0];
		}
			compress_video($compression_source, $compression_target) unless -e $compression_target;
			my $final = trim_target($compression_target); 
			trim_video($compression_target, $final, $start, $end) unless -e $final;
	}
}
sub compression_target { 
	my $file = shift;
	$file =~ s/\.(mov|m2v|mts|mp4)$//i;
	$file .= '.mp4';
	if (-e $file)
	{ 	say STDERR "$file: file exists, adding underscore to name";
		$file =~ s/\.mp4$/_.mp4/;
		$file = compression_target($file); # add another underscore if necessary
	}
	$file
}
sub trim_target { "$finaldir/$_[0]" }

sub concatenate_video {
	my ($temp, @sources) = @_;
	# force to mp4
	$temp .= ".mp4" unless $temp =~ /mp4$/;
	my $parts = join '|', @sources;
	my $cmd = qq(ffmpeg -i concat:"$parts" -codec copy $temp);
	say STDERR "concatenating: @sources -> $temp";
	say $cmd;
	system $cmd unless $test;
}
sub trim_video {
	my ($input, $output, $start, $end) = @_;
	# we don't need to transcode if no trimming and input is already mp4
	if (! $start and ! $end and $input =~ /\.mp4$/){
		say "moving unchanged file $input to $output";
		rename($input, $output) if not $test;
	}
	else {
	my @args = "trimvideo -i $input -o $output";
	$start //= 0;
	push @args, "--start $start" if $start;
	push @args, "--end $end " if $end;
	push @args, "-n " if $test;
	my $cmd = join " ", @args;
	say $cmd;
	system($cmd);
	}
}
sub compress_video {
	my ($inputfile, $outputfile) = @_;
	say STDERR "compressing $inputfile -> $outputfile";
	my $cmd = <<CMD;
	HandBrakeCLI
		-i "$inputfile"
		-o "$outputfile"
		--optimize # for streaming
		--encoder x264
		# --x264-profile baseline # handbrake chooses this 
		--x264-tune film
		--x264-preset fast
		--quality 24 # single-pass constate-rate factor (CRF)
		--vfr
		--width 512
		--height 288
		--loose-anamorphic
		--loose-crop
		#--modulus 16 # default increment for frame dimensions
		--keep-display-aspect
		--encopts cabac=0:ref=2:me=umh:bframes=0:weightp=0:subme=6:8x8dct=0:trellis=0
		# --decomb     # probably not needed
		# --detelecine # -ditto-
		--aencoder av_aac
		#--drc 1 dynamic range control 
		--ab 80 # audio bitrate kbps
		--arate 24 # audio sample rate kHz
CMD
	$cmd =~ s/^\s+//mg;  	# remove initial spaces in lines
	$cmd =~ s/#.*$//mg; 	# remove comments
	$cmd =~ s/^\s*\n//mg; 	# remove blank lines
	$cmd =~ s/\n/ \\\n/sg; 	# add end-of-line backslashes
	$cmd =~ s/.$//; 		# except last line
	say $cmd;
	system $cmd unless $test;
}
__END__
