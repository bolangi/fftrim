#!/usr/bin/env perl
use strict;
use warnings;
use autodie ':all';
use feature 'say';
my ($test) = @ARGV;

## commented lines are dropped
#00000.MTS
## two files are to be combined CONTENTS format:
# 00001.MTS 00002.MTS : S5-D01 Orly group session with three 3mo babies : 0:15 : 1:03:15

my %length;
my $finaldir = '../final';
mkdir $finaldir unless -e $finaldir;
-d $finaldir or die "$finaldir is not a directory!";

# remove column 1 commented lines
my (@lines) = split "\n", qx( cat ./CONTENTS);
@lines = grep{ ! /^#/ and ! /^\s*$/ }  @lines;
my $is_error;

process_lines(); # check for errors;
say(STDERR "Errors found. Fix CONTENTS files and try again."), exit if $is_error;
process_lines("really do it!"); # but still may be a test

sub process_lines { 
	my $do = shift;
	foreach my $line (@lines){
		$line =~ s/\s+$//;
		say STDERR "line: $line";
		my ($source_files, $target, $start, $end) = split /\s+:\s+/, $line;
		my @source_files = split " ", $source_files;
		for (@source_files){
		if ( ! defined $length{$_} )
			{
				my $len = qx(video-length "$_");
				chomp $len;
				$length{$_} = seconds($len);
			}
		}
		say STDERR qq(no target for source files "$source_files". Using source name.) if not $target;
		$target //= $source_files[0];
		$target = mp4_target($target);
		my $ext = 'mp4';
		#$target = generate_target(target => $target, ext => $ext, from => \@source_files);
		{
		no warnings 'uninitialized';
		say STDERR "source files: @source_files";
		say STDERR "target: $target";
		say STDERR "start time: $start";
		say STDERR "end time: $end";
		say(STDERR qq(no source files in line!! $line)), $is_error++, if not @source_files;
		my @missing = grep { ! -r } @source_files;
		say(STDERR qq(missing source files: @missing)), $is_error++, if @missing;
		}

		next unless $do;
		my $compression_source;
		if (@source_files > 1)
		{
			my $concat_target = mp4_target($source_files[0]);
			say STDERR "concat target: $concat_target";
			concatenate_video($concat_target, @source_files);
			$compression_source = $concat_target;
		} 
		else 
		{ 
			$compression_source = $source_files[0];
		}
			my $final = trim_target($target); 
			compress_and_trim_video(
				$compression_source,
				$final, 
				hmsplus($start, \@source_files), 
				hmsplus($end, 	\@source_files),
			);
	}
}
sub generate_target {
	my %args = @_;
	$args{target} =~ s/\.(mov|m2v|mts)$//i;
	my $ext = $args{ext};
	$ext //=  is_video($args{from}) ? 'mp4' : 'mp3';
	$ext
}

sub media_type {
	my ($in) = @{+shift};
	my ($ext) = lc( $in =~ /\.([a-z]{1,3})$/i );
	say $ext;
	return "video" if $ext =~ /mov|m2v|mts|mp4|dvi/ ;
	return "audio" if $ext =~ /mp3|ogg|wav/ ;
}
sub is_video { media_type eq 'video' }
sub is_audio { media_type ne 'video' }

sub mp4_target { 
	my $file = shift;
	$file =~ s/\.(mov|m2v|mts)$//i;
	$file .= '.mp4' unless $file =~ /\.mp4$/;
	$file
}
sub trim_target { "$finaldir/$_[0]" }

sub concatenate_video {
	my ($target, @sources) = @_;
	$target .= ".mp4" unless $target =~ /mp4$/;
	say(STDERR "$target: file exists, skipping"), return if -e $target;
	my $parts = join '|', @sources;
	my $cmd = qq(ffmpeg -i concat:"$parts" -codec copy $target);
	say STDERR "concatenating: @sources -> $target";
	say $cmd;
	system $cmd unless $test;
}
sub compress_and_trim_video {
	my ($input, $output, $start, $end) = @_;
	say(STDERR "$output: file exists, skipping"), return if -e $output;
	# we don't need to transcode if no trimming and input is already mp4
	$start //= 0;
	my $encoding_params = <<PARAMS;
-c:v libx264
-preset:v medium
-profile:v main
-tune:v film
-s:v 640x360
-c:a aac
-b:a 80k
-ac 2
-ar 24000
-filter_complex aresample=24000
-level 3
-strict -2
-copyts
PARAMS
	$encoding_params =~ s/\n/ /g;
	my @args = "ffmpeg";
	push @args, "-i $input";
	push @args, "-ss $start"; 
	push @args, "-to $end" if $end;
	push @args, $encoding_params;
	push @args, $output;
	my $cmd = join " ",@args;
	say $cmd;
	system $cmd unless $test
}
sub seconds {
	my $hms = shift;
	my $count = $hms =~ tr/:/:/;
	$count //= 0;
	# case 1, seconds only
	if (! $count)
	{
		return $hms
	}
	elsif($count == 1)
	{
		# m:s
	
		my ($m,$s) = split ':', $hms;
		return $m * 60 + $s
	}
	elsif($count == 2)
	{
		my ($h,$m,$s) = split ':', $hms;
		return $h * 3600 + $m * 60 + $s
	}
	else { die "$hms: something wrong, detected too many ':' characters" }
}
sub hms {
	my $seconds = shift;
	my $whole_hours = int( $seconds  / 3600 );
	#say "whole hours: $whole_hours";
	$seconds -= $whole_hours * 3600;
	my $whole_minutes = int( $seconds / 60 );
	#say "whole minutes: $whole_minutes";
	$seconds -= $whole_minutes * 60;
	my $output;
	$output .=  "$whole_hours:" if $whole_hours;
	$output .=  "$whole_minutes:" if $whole_minutes;
	$output .= $seconds;
	$output
}
sub hmsplus {
	my ($pos, $sources) = @_;
	# 1+2+24:15
	my (@skip_segments) = $pos =~ /(\d\+)?(\d\+)?(\d\+)?([^+]+)$/;
	@skip_segments = grep{$_}map{ do { s/\+\s*//g; $_} if $_ } @skip_segments;
	my $cutpoint = (pop @skip_segments) || 0;
	my $total_length = 0;
	$total_length += seconds($cutpoint);
	for (0 .. scalar @$sources-1){
		$total_length += $length{$sources->[$_]} if $_ < @skip_segments;
	}
	hms($total_length)
}
1 # obligatory return value
	
__END__
