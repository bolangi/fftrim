#!/usr/bin/env perl
use strict;
use warnings;
use autodie ':all';
use feature 'say';
my ($test) = @ARGV;

## commented lines are dropped
#00000.MTS
## two files are to be combined CONTENTS format:
# 00001.MTS 00002.MTS : S5-D01 Orly group session with three 3mo babies : 0:15 : 1:03:15

my $finaldir = '../final';
mkdir $finaldir unless -e $finaldir;
-d $finaldir or die "$finaldir is not a directory!";

# remove column 1 commented lines
my @lines = grep{ ! /^#/} split "\n", qx( cat ./CONTENTS);
my $is_error;
process_lines(); # check for errors;
say(STDERR "Errors found. Fix CONTENTS files and try again."), exit if $is_error;
process_lines("really do it!"); # but still may be a test

sub process_lines { 
	my $do = shift;
	foreach my $line (@lines){
		$line =~ s/\s+$//;
		say STDERR "line: $line";
		my ($source_files, $target, $start, $end) = split /\s+:\s+/, $line;
		my @source_files = split " ", $source_files;
		say STDERR qq(no target for source files "$source_files". Using source name.) if not $target;
		$target //= $source_files[0];
		$target = mp4_target($target);
		{
		no warnings 'uninitialized';
		say STDERR "source files: @source_files";
		say STDERR "target: $target";
		say STDERR "start time: $start";
		say STDERR "end time: $end";
		say(STDERR qq(no source files in line!! $line)), $is_error++, if not @source_files;
		my @missing = grep { ! -r } @source_files;
		say(STDERR qq(missing source files: @missing)), $is_error++, if @missing;
		}

		next unless $do;
		my $compression_source;
		if (@source_files > 1)
		{
			my $concat_target = mp4_target($source_files[0]);
			say STDERR "concat target: $concat_target";
			concatenate_video($concat_target, @source_files);
			$compression_source = $concat_target;
		} 
		else 
		{ 
			$compression_source = $source_files[0];
		}
			my $final = trim_target($target); 
			trim_video($compression_source, $final, $start, $end);
	}
}
sub mp4_target { 
	my $file = shift;
	$file =~ s/\.(mov|m2v|mts)$//i;
	$file .= '.mp4';
	$file
}
sub trim_target { "$finaldir/$_[0]" }

sub concatenate_video {
	my ($target, @sources) = @_;
	say(STDERR "$target: file exists, skipping"), return if -e $target;
	# force to mp4
	$target .= ".mp4" unless $target =~ /mp4$/;
	my $parts = join '|', @sources;
	my $cmd = qq(ffmpeg -i concat:"$parts" -codec copy $target);
	say STDERR "concatenating: @sources -> $target";
	say $cmd;
	system $cmd unless $test;
}
sub trim_video {
	my ($input, $output, $start, $end) = @_;
	say(STDERR "$output: file exists, skipping"), return if -e $output;
	# we don't need to transcode if no trimming and input is already mp4

	$start //= 0;
	my $encoding_params = <<PARAMS;
-c:v libx264
-preset:v medium
-profile:v main
-tune:v film
-s:v 640x360
-c:a aac
-b:a 64k
-ac 1
-level 3
-strict -2
-copyts
PARAMS
	$encoding_params =~ s/\n/ /g;
	my @args = "ffmpeg";
	push @args, "-i $input";
	push @args, "-ss $start"; 
	push @args, "-to $end" if $end;
	push @args, $encoding_params;
	push @args, $output;
	my $cmd = join " ",@args;
	say $cmd;
}
__END__
