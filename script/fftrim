#!/usr/bin/env perl
use strict;
use warnings;
use Path::Tiny;
use autodie ':all';
use feature 'say';
use Cwd;

use Getopt::Long::Descriptive;

my ($opt, $usage) = describe_options(
   '%c %o',
   [ 'source-dir=s',  	"source directory for video clips (batch mode)" ],
   [ 'target-dir=s',	"destination directory for processed videos (batch mode)" ],
   [ 'in=s',			"input file"],
   [ 'out=s',			"output file"],
   [ 'start=s',			"start time"],
   [ 'end=s',			"end time"],
   [ 'profile=s',       'use named profile under $HOME/.fftrim/, otherwise "default"'],
   [ 'c',      			"make output files conform to source file frame rate" ],
   [ 'n',      			"simulate: show output commands but do not run them" ],
   [ 'm',      			"simulate: show output commands omitting file checks" ],
   [ 'help',   			"print usage message and exit" ],
 );
print($usage->text), exit if $opt->{help} or ! keys %$opt;

# 00000.MTS 00001.MTS 00002.MTS : 20170815-1 : 0:15 : # 1+2+11:41
# three .MTS files are to be concatentated into
# intermediate file 00000.mp4, then trimmed and 
# compressed into ../final/20170815-1.mp4

my $current_dir = getcwd;

# support old filename
my ($control_file) = grep{ -e } map{ join_path($opt->{source_dir},$_) }  qw(CONTROL CONTENTS);
-e $control_file or die "CONTROL file not found in $opt->{source_dir}";

my $profile = join_path($ENV{HOME}, '.fftrim',  $opt->{profile} // 'default');
say "profile is $profile";
my $fh;
if ( -r $profile){ open $fh, '<', $profile }
else { $fh = *DATA }
my $encoding_params = join '', grep {! /^#/} <$fh>;
$encoding_params =~ s/\n/ /g;
compress_and_trim_video($opt->{in}, $opt->{out}, $opt->{start} // 0, $opt->{end}), exit if $opt->{in} and $opt->{out};


my %length;
my $framerate;
my $finaldir = $opt->{target_dir};
mkdir $finaldir unless -e $finaldir;
-d $finaldir or die "$finaldir is not a directory!";

my $control = path($control_file);
my (@lines) = grep {! /^#/} map{ chomp; $_ } $control->lines;
my $is_error;

process_lines(); # check for errors;
say(STDERR "Errors found. Fix $control_file and try again."), exit if $is_error;
process_lines("really do it! (but still may be a test)");

sub process_lines { 
	my $do = shift;
	foreach my $line (@lines){
		$line =~ s/\s+$//;
		say STDERR "line: $line";
		my ($source_files, $target, $start, $end) = split /\s+[:|]\s+/, $line;
		my @source_files = map{ join_path($opt->{source_dir}, $_)} split " ", $source_files;
		$framerate = video_framerate($source_files[0]);
		for (@source_files){
		if ( ! defined $length{$_} )
			{
				my $len = video_length($_);
				$length{$_} = seconds($len);
			}
		}
		say STDERR qq(no target for source files "$source_files". Using source name.) if not $target;
		if ( ! $target ) { 
			$target = to_mp4($source_files[0]);
		}
		else {
			$target = mp4($target) unless $target =~ /\.[a-zA-Z]{3}$/ 
		}
		{
		no warnings 'uninitialized';
		say STDERR "source files: @source_files";
		say STDERR "target: $target";
		say STDERR "start time: $start";
		say STDERR "end time: $end";
		say(STDERR qq(no source files in line!! $line)), $is_error++, if not @source_files;
		my @missing = grep { ! -r } @source_files;
		say(STDERR qq(missing source files: @missing)), $is_error++, if @missing;
		}

		next unless $do;
		my $compression_source;
		if (@source_files > 1)
		{
			my $concat_target = to_mp4($source_files[0]);
			say STDERR "concat target: $concat_target";
			concatenate_video($concat_target, @source_files);
			$compression_source = $concat_target;
		} 
		else 
		{ 
			$compression_source = $source_files[0];
		}
			my $final = trim_target($target); 
			$start = decode_cutpoint($start, \@source_files);
			$end = decode_cutpoint($end, \@source_files);
			say STDERR "decoded start: $start, decoded end: $end";
			compress_and_trim_video(
				$compression_source,
				$final, 
				$start,
				$end
			);
	}
}

sub name_part  { my ($name) = /(.+?)(\.[a-zA-Z]{3})?$/ }
sub mp4 { $_[0] . '.mp4' }
sub to_mp4 { mp4(name_part($_[0])) }

sub trim_target { "$finaldir/$_[0]" }

sub concatenate_video {
	my ($target, @sources) = @_;
	$target .= ".mp4" unless $target =~ /mp4$/;
	say(STDERR "$target: file exists, skipping"), return if file_exists($target);
	my $parts = join '|', @sources;
	my $cmd = qq(ffmpeg -i concat:"$parts" -codec copy $target);
	say STDERR "concatenating: @sources -> $target";
	say $cmd;
	system $cmd unless simulate();
}
sub compress_and_trim_video {
	my ($input, $output, $start, $end) = @_;
	say(STDERR "$output: file exists, skipping"), return if file_exists( $output );
	$start //= 0;
	my @args = "ffmpeg";
	push @args, "-i $input";
	push @args, "-to $end" if $end;
	push @args, $encoding_params;
	push @args, "-ss $start" if $start;
	push @args, "-r $framerate" if $opt->{c};
	push @args, $output;
	my $cmd = join " ",@args;
	say $cmd;
	system $cmd unless simulate();
}
sub seconds {
	my $hms = shift;
	my $count = $hms =~ tr/:/:/;
	$count //= 0;
	# case 1, seconds only
	if (! $count)
	{
		return $hms
	}
	elsif($count == 1)
	{
		# m:s
	
		my ($m,$s) = split ':', $hms;
		return $m * 60 + $s
	}
	elsif($count == 2)
	{
		my ($h,$m,$s) = split ':', $hms;
		return $h * 3600 + $m * 60 + $s
	}
	else { die "$hms: something wrong, detected too many ':' characters" }
}
sub hms {
	my $seconds = shift;
	my $whole_hours = int( $seconds  / 3600 );
	$seconds -= $whole_hours * 3600;
	my $whole_minutes = int( $seconds / 60 );
	$seconds -= $whole_minutes * 60;
	$whole_minutes = "0$whole_minutes" if $whole_minutes < 10;
	$seconds = "0$seconds" if $seconds < 10;
	my $output;
	$output .=  "$whole_hours:" if $whole_hours;
	$output .=  "$whole_minutes:" if $whole_minutes > 0 or $whole_hours;
	$output .= $seconds;
	$output
}
sub decode_cutpoint {
	my ($pos, $sources) = @_;
	return unless $pos;
	# 1+2+24:15
	# 3-24:15 3rd file
	my ($nth, $time) = $pos =~ /(\d+)-([\d:]+)/;
	my $cutpoint; # this is a position in the final source file
	my $segments; # this is the count of the preceeding source files included at full length
	if ($nth){
		$cutpoint = $time;	
		$segments = $nth - 1;
	}
	else {
		my (@segments) = $pos =~ /(\d\+)?(\d\+)?(\d\+)?([^+]+)$/;
		@segments = grep{$_}map{ do { s/\+\s*//g; $_} if $_ } @segments;
		$cutpoint = (pop @segments) || 0;
		$segments = scalar @$sources - 1;  
	}
	my $total_length = seconds($cutpoint);
	for (0 .. $segments - 1){ $total_length += $length{$sources->[$_]} }
	#say "total length: $total_length";
	hms($total_length)
}
sub join_path { join '/',@_ }

sub simulate { $opt->{n} or $opt->{m} }
sub file_exists { $opt->{m} ? 0 : -e $_[0] }

sub video_length {
	my $videofile = shift;
	my $result = qx(ffmpeg -i "$videofile" 2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,//);
	chomp $result;
	$result
}
sub video_framerate {
	my $videofile = shift;
	my $result = qx(ffprobe "$videofile" 2>&1);
	my ($fps) = $result =~ /(\d+(.\d+)?) fps/;
}

__DATA__
-c:v libx264
-preset:v medium
-profile:v main
-tune:v film
-s:v 640x360
-c:a aac
-b:a 80k
-ac 2
-ar 24000
-level 3
-strict -2
-copyts
